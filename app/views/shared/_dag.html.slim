- model_name        = model_name.to_s
- label_attribute ||= :dag_label
- title_attribute ||= :title
- class_attribute ||= :dag_class

- plural_model_name = model_name.pluralize
- models = instance_variable_get("@#{model_name.to_s.pluralize}")

- if instance_variable_get("@#{model_name.pluralize}").any?

  #dag

  css:

    text {
      font-weight: 300;
      font-family: "Helvetica Neue", Helvetica, Arial, sans-serf;
      font-size: 14px;
      pointer-events: none;
    }

    .node circle {
      stroke: #999;
      fill: #ccc;
      stroke-width: 1.5px;
    }

    .node { cursor: pointer; }

    .node.html circle { fill: #6D9CA5; stroke: #6D9CA5; }
    .node.css  circle { fill: #87A38F; stroke: #87A38F; }
    .node.js   circle { fill: #9B8FAB; stroke: #9B8FAB; }
    .node.rb   circle { fill: #AB8E8B; stroke: #AB8E8B; }

    .node:hover .label {
      display: block;
    }

    .edgePath path {
      stroke: #777;
      stroke-width: 1.5px;
    }

    tspan { fill: #fff; pointer-events: none; }

  javascript:

    // Create the input graph
    var g = new dagreD3.graphlib.Graph()
      .setGraph({
        nodesep: 10,
        rankdir: 'LR',
        edgesep: 0,
        ranksep: 100,
        marginx: 20,
        marginy: 20
      })
      .setDefaultEdgeLabel(function() { return {}; });

    #{ raw instance_variable_get("@#{model_name.pluralize}").map {|node| 'g.setNode('+node.id.to_s+',{label:"'+node.send(label_attribute).to_s+'",class:"'+node.send(class_attribute).to_s+'",width:32,height:32,shape:"circle",title:"'+node.send(title_attribute).to_s+'",pluralized_model:"'+plural_model_name+'",languages:"'+j(node.try(:language_breakdown).try(:to_json))+'"});' }.join("\n") }

    // Set up edges, no special attributes.
    #{ raw "#{model_name.titleize}Relationship".constantize.includes(:prereq, model_name.to_sym).where("#{model_name}_id".to_sym => models.pluck(:id)).order("#{plural_model_name}.position").map {|rel| 'g.setEdge('+rel.prereq.id.to_s+','+rel.send(model_name).id.to_s+',{lineInterpolate:"bundle"});' }.join("\n") }

    // Create the renderer
    var render = new dagreD3.render();

    var width = 1140;

    var zoom = d3.behavior.zoom()
      .scaleExtent([1, 1])
      .on("zoom", zoomed);

    function zoomed() {
      var draw_width = d3.select('g.nodes')[0][0].getBBox().width;
      var min_x = d3.min([0, width - 40 - draw_width]);
      var max_x = d3.max([width - 40 - draw_width, 0]);
      var new_x = d3.min([d3.max([d3.event.translate[0], min_x]), max_x]);
      zoom.translate([new_x, 0]);
      svgGroup.attr("transform", "translate(" + [new_x, 0] + ")");
    }

    // Set up an SVG group so that we can translate the final graph.
    var svg = d3.select("#dag").append('svg').attr('width',width).call(zoom),
        svgGroup = svg.append("g");

    // Disable mousewheel zoom
    svg.on("wheel.zoom", null);
    svg.on("mousewheel.zoom", null);

    // Run the renderer. This is what draws the final graph.
    render(d3.select("svg g"), g);

    svg.attr("height", g.graph().height);

    $(document).ready(function () {
      $("svg circle").tooltip({container: '#dag', placement: 'top'});
    });